#!/usr/bin/env python

"""
Make.py GUI
"""
import sys
import re
from PyQt4.QtCore import *
from PyQt4.QtGui import *

fname = 'text2.scrs'
class MainWindow(QWidget):

    def __init__(self):
        super(MainWindow, self).__init__()
        self.initGUI()

    def initGUI(self):
        grid = QGridLayout()
        grid.setSpacing(20)
        btn = QPushButton('Add OOT Blocks')
        grid.addWidget(btn, 5, 3)

        # Add buttons for file showing or bit generation
        # This buttons also execute the final command
        show_file_btn = QPushButton('Show instantiation File')
        show_file_btn.setToolTip('Click to open the resultant file in a new window')
        show_file_btn.resize(show_file_btn.sizeHint())
        grid.addWidget(show_file_btn,6 , 2)

# Create tree to categorize Ettus Block and OOT Blocks in different lists
        treeView = QTreeView(self)
        #Set items no editable
        treeView.setEditTriggers(QAbstractItemView.NoEditTriggers)
        treeView.setContextMenuPolicy(Qt.CustomContextMenu)
        EttusBlocks = QStandardItem("Ettus-provided Blocks")
        self.populateList(EttusBlocks,fname)
        self.OOT = QStandardItem("OOT Blocks")

# Tree for blocks in design
        blocksInDesign = QTreeView(self)
        blocksInDesign.setEditTriggers(QAbstractItemView.NoEditTriggers)
        blocksInDesign.setGeometry(QRect(20, 40, 601, 501))
        grid.addWidget(blocksInDesign, 2, 5)

        model = QStandardItemModel(self) #REMEMBER THE IHNERITANCE!!
        model.appendRow(EttusBlocks)
        model.appendRow(self.OOT)
        btn.clicked.connect(self.fileDiag)
        treeView.setModel(model)
        grid.addWidget(treeView, 2, 3)

# Connect the signals to the slots
        show_file_btn.clicked.connect(self.on_press)
        show_file_btn.pressed.connect(self.on_press)
        show_file_btn.released.connect(self.on_release)

        self.setLayout(grid)

        self.setGeometry(10, 10, 600, 600)
        self.setWindowTitle("RFNoC BITERATOR")
        self.show()


# Create the action for the button
    @pyqtSlot()
    def on_click(self):
        print('clicked')
    @pyqtSlot()
    def on_press(self):
        print('pressed')
    @pyqtSlot()
    def on_release(self):
        print('released')
    @pyqtSlot()
    def fileDiag(self):
        filename = QFileDialog.getOpenFileName(self, 'Open File', '/')
        self.populateList(self.OOT,filename)

    def populateList(self,parent,files):
        suffix = '.v \\\n'
        with open(files) as f:
            blocks = f.readlines()
        for element in blocks:
            if element.endswith(suffix):
                element = element[:-len(suffix)] #TODO: there should be a nicer pythonic way
                block = QStandardItem(element)
                parent.appendRow(block)

def main():
    app = QApplication(sys.argv)
    window = MainWindow()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()


