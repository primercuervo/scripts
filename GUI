#!/usr/bin/env python

"""
Make.py GUI
"""
import sys
import re
from PyQt4.QtCore import *
from PyQt4.QtGui import *

fname = 'text2.scrs'
class MainWindow(QMainWindow):

    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)
        self.form_widget = FormWidget(self)
        self.setCentralWidget(self.form_widget)

class FormWidget(QWidget):
    def __init__(self, parent):
        super(FormWidget, self).__init__(parent)
        self.layout = QVBoxLayout(self)

        # def retrieve_blk_name(filename, linepattern, newline):
            # """ Detects the re 'linepattern' in the file. After its last occurrence,
            # stores line per line the contents of the file into a list. If the pattern
            # does not exist, returns.
            # """
            # files = open(filename, 'r').read()
            # lines = re.findall(linepattern, files, flags=re.MULTILINE)
            # if len(lines) == 0:
                # return

            # oldfile = open(filename, 'r').read()
            # lines = re.findall(newline, oldfile, flags=re.MULTILINE)
            # if len(lines) != 0:
                # pass
            # else:
                # pattern_lines = re.findall(linepattern, oldfile, flags=re.MULTILINE)
                # if len(pattern_lines) == 0:
                    # open(filename, 'a').write(newline)
                    # return
                # last_line = pattern_lines[-1]
                # newfile = oldfile.replace(last_line, last_line + newline + '\n')
                # open(filename, 'w').write(newfile)


# Create the action for the button
        @pyqtSlot()
        def on_click():
            print('clicked')
        @pyqtSlot()
        def on_press():
            print('pressed')
        @pyqtSlot()
        def on_release():
            print('released')
#Message box - No blocks found on given path
        @pyqtSlot()
        def populateList(parent):
            suffix = '.v \\\n'
            with open(fname) as f:
                blocks = f.readlines()
            for element in blocks:
                if element.endswith(suffix):
                    element = element[:-len(suffix)] #TODO: there should be a nicer pythonic way
                    #self.model.addItem(element)
                    self.model.appendRow(element)

            # QMessageBox.warning(window, "No Blocks Found!", "No RFNoC blocks found in the given path.")


        self.btn = QPushButton('Do not press')
        self.layout.addWidget(self.btn)
        # Add buttons for file showing or bit generation
        # This buttons also execute the final command
        self.show_file_btn = QPushButton('Show instantiation File')
        self.show_file_btn.setToolTip('Click to open the resultant file in a new window')
        #show_file_btn.clicked.connect(exit)
        self.show_file_btn.resize(self.show_file_btn.sizeHint())
        self.layout.addWidget(self.show_file_btn)
        # self.show_file_btn.move(100, 80)
#Create textbox for RFNoC OOT Paths
        self.oot_path_label = QLabel
        self.oot_path = QLineEdit()
        self.oot_path.move(20,20)
        self.oot_path.resize(280,40)
        self.layout.addWidget(self.oot_path)

# Create tree to categorize Ettus Block and OOT Blocks in different lists
        self.listView = QListView()
        self.listView.setContextMenuPolicy(Qt.CustomContextMenu)
        EttusBlocks = QStandardItem("Ettus-provided Blocks")
        #kself.listView = QStandardItemu
        self.model = QStandardItemModel()
        self.model.appendRow(EttusBlocks)
        self.btn.clicked.connect(populateList(EttusBlocks))
        self.listView.setModel(self.model)
        self.layout.addWidget(self.listView)
####
# Working on list widget
###
        self.block_list = QListWidget()
        self.block_list.addItem("Item 1")
        self.block_list.addItem("Item 2")
        self.block_list.addItem("Item 3")
        self.block_list.addItem("Item 4")
        self.layout.addWidget(self.block_list)

### /endlist


# Connect the signals to the slots
        self.show_file_btn.clicked.connect(on_click)
        self.show_file_btn.pressed.connect(on_press)
        self.show_file_btn.released.connect(on_release)

def addItems(parent, elements):
        for text, children in elements:
            item = QStandardItem(text)
            parent.appendRow(item)
            if children:
                self.addItems(item, children)


app = QApplication(sys.argv)
window = MainWindow()
window. resize(620, 440)
window. setWindowTitle("Make.py GUI")

window.show()
#sys.exit(a.exec_())
app.exec_()
